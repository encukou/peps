PEP: 356
Title: Python 2.5 Release Schedule
Version: $Revision$
Author: Neal Norwitz, GvR
Status: Draft
Type: Informational
Created: 07-Feb-2006
Python-Version: 2.5
Post-History: 

Abstract

    (GvR: I'm sprinkling questions like this throughout this document.
    I'll remove them again once the questions are answered.)

    This document describes the development and release schedule for
    Python 2.5.  The schedule primarily concerns itself with PEP-sized
    items.  Small features may be added up to and including the first
    beta release.  Bugs may be fixed until the final release.

    There will be at least two alpha releases, two beta releases, and
    one release candidate.  The release date is planned 30 September 2006.


Release Manager

    TBD (Anthony Baxter?)

    Martin von Loewis is building the Windows installers,
    Fred Drake the doc packages, and
    TBD (Sean Reifschneider?) the RPMs.


Release Schedule

    (GvR: perhaps one month earlier?  If change, update abstract)

    alpha 1: May 6, 2006 [planned]
    alpha 2: June 3, 2006 [planned]
    alpha 3: July 1, 2006 [planned]
    beta 1:  July 29, 2006 [planned]
    beta 2:  August 26, 2006 [planned]
    rc 1:    September 16, 2006 [planned]
    final:   September 30, 2006 [planned]


Completed features for 2.5

    PEP 309: Partial Function Application
    PEP 314: Metadata for Python Software Packages v1.1
        (should PEP 314 be marked final?)
    PEP 341: Unified try-except/try-finally to try-except-finally
    PEP 342: Coroutines via Enhanced Generators

    - AST-based compiler

    - Add support for reading shadow passwords (http://python.org/sf/579435)

    - any()/all() builtin truth functions

    - new hashlib module add support for SHA-224, -256, -384, and -512
      (replaces old md5 and sha modules)

    - new cProfile module suitable for profiling long running applications
      with minimal overhead


Planned features for 2.5

    PEP 308: Conditional Expressions.
    (GvR: who is volunteering?)

    PEP 328: Absolute/Relative Imports
    (GvR: who is volunteering?)

    PEP 343: The "with" Statement
    (GvR: who is volunteering?  Is MWH's hack/patch available?)

    PEP 352: Required Superclass for Exceptions
    (GvR: who is volunteering?  Maybe Brett?)

    PEP 353: Using ssize_t as the index type
    MvL expects this to be complete in March.

    Access to C AST from Python
    (GvR: I have a bunch more that could/would/should be added.)

    Add bdist_msi to the distutils package.  (MvL wants one more
    independent release first.)

    Add bdist_deb to the distutils package?
    (But see http://mail.python.org/pipermail/python-dev/2006-February/060926.html)

    Add bdist_egg to the distutils package???

    Add setuptools to the standard library.

    Add wsgiref to the standard library.


Deferred until 2.6:

    - None


Open issues

    This PEP needs to be updated and release managers confirmed.

    - Review PEP  4: Deprecate and/or remove the modules
    - Review PEP 11: Remove support for platforms as described


Carryover features from Python 2.4

    (GvR: should we just drop this section and reject the PEPs/patches?)

    Are any of these done or planned for 2.5?

    - Finish implementing the Distutils bdist_dpkg command.  (AMK)

    - It would be nice if the built-in SSL socket type could be used
      for non-blocking SSL I/O.  Currently packages such as Twisted 
      which implement async servers using SSL have to require third-party
      packages such as pyopenssl.  

    - reST is going to be used a lot in Zope3.  Maybe it could become
      a standard library module?  (Since reST's author thinks it's too
      unstable, I'm inclined not to do this.)


Carryover features from Python 2.3

    (GvR: should we just drop this section and reject the PEPs/patches?)

    - The import lock could use some redesign.  (SF 683658.)

    - A nicer API to open text files, replacing the ugly (in some
      people's eyes) "U" mode flag.  There's a proposal out there to
      have a new built-in type textfile(filename, mode, encoding).
      (Shouldn't it have a bufsize argument too?)

    - New widgets for Tkinter???

      Has anyone gotten the time for this?  *Are* there any new
      widgets in Tk 8.4?  Note that we've got better Tix support
      already (though not on Windows yet).

    - For a class defined inside another class, the __name__ should be
      "outer.inner", and pickling should work.  (SF 633930.  I'm no
      longer certain this is easy or even right.)

    - Decide on a clearer deprecation policy (especially for modules)
      and act on it.  For a start, see this message from Neal Norwitz:
      http://mail.python.org/pipermail/python-dev/2002-April/023165.html
      There seems insufficient interest in moving this further in an
      organized fashion, and it's not particularly important.

    - Provide alternatives for common uses of the types module;
      Skip Montanaro has posted a proto-PEP for this idea:
      http://mail.python.org/pipermail/python-dev/2002-May/024346.html
      There hasn't been any progress on this, AFAICT.

    - Use pending deprecation for the types and string modules.  This
      requires providing alternatives for the parts that aren't
      covered yet (e.g. string.whitespace and types.TracebackType).
      It seems we can't get consensus on this.

    - Lazily tracking tuples?
      http://mail.python.org/pipermail/python-dev/2002-May/023926.html
      http://www.python.org/sf/558745
      Not much enthusiasm I believe.


Copyright

    This document has been placed in the public domain.



Local Variables:
mode: indented-text
indent-tabs-mode: nil
End:

PEP: 376
Title: Changing the .egg-info structure
Version: $Revision$
Last-Modified: $Date$
Author: Tarek Ziad√© <tarek@ziade.org>
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 22-Feb-2009
Python-Version: 2.7, 3.2
Post-History:


Abstract
========

This PEP proposes various enhancements for Distutils:

- A new format for the .egg-info structure.
- Some APIs to read the meta-data of a project

Definitions
===========

A **project** is a Python application composed of one or several files, which can
be Python modules, extensions or data. It is distributed using a `setup.py` script 
with Distutils and/or Setuptools. The `setup.py` script indicates where each 
elements should be installed.

Once installed, the elements are located in various places in the system, like:

- in Python's site-packages (Python modules, Python modules organized into packages, 
  Extensions, etc.)
- in Python's `include` directory.
- in Python's `bin` or `Script` directory.
- etc.

Rationale
=========

There are two problems right now in the way projects are installed in Python:

- There are too many ways to do it.
- There is no API to get the metadata of installed projects.

How projects are installed
--------------------------

Right now, when a project is installed in Python, every elements its contains 
is installed in various directories. 

The pure Python code for instance is  installed in the `purelib` directory,
which is located in the Python  installation in `lib\python2.6\site-packages`
for example under unix-like systems or Mac OS X, and in `Lib/site-packages` 
under Windows. This is done with the Distutils `install` command, which calls
various subcommands.

The `install_egg_info` subcommand is called during this process, in order to 
create an `.egg-info` file in the `purelib` directory.

For example, if the `zlib` project (which contains one package) is installed,
two elements will be installed in `site-packages`::

 - zlib
 - zlib-2.5.2-py2.4.egg-info

Where `zlib` is a Python package, and `zlib-2.5.2-py2.4.egg-info` is
a file containing the project metadata as described in PEP 314 [#pep314]_.

This file corresponds to the file called `PKG-INFO`, built by 
the `sdist` command.

The problem is that many people use `easy_install` (setuptools [#setuptools]_) 
or `pip` [#pip]_ to install their packages, and these third-party tools do not 
install packages in the same way that Distutils does:

- `easy_install` creates an `EGG-INFO` directory inside an `.egg` directory, 
  and adds a `PKG-INFO` file inside this directory. The `.egg` directory 
  contains in that case all the elements of the project that are supposed to
  be installed in `site-packages`, and is placed in the `site-packages` 
  directory.

- `pip` creates an `.egg-info` directory inside the `site-packages` directory
  and adds a `PKG-INFO` file inside it. Elements of the project are then
  installed in various places like Distutils does.

They both add other files in the `EGG-INFO` or `.egg-info` directory, and
create or modify `.pth` files.

Uninstall information
---------------------

Distutils doesn't provide any `uninstall` command. If you want to uninstall
a project, you have to be a power user and remove the various elements that
were installed. Then look over the `.pth` file to clean them if necessary.

And the process differs, depending on the tools you have used to install the
project, and if the project's `setup.py` uses Distutils or Setuptools.

Under some circumstances, you might not be able to know for sure that you 
have removed everything, or that you didn't break another project by
removing a file that was shared among the two projects.

But there's common behavior: when you install a project, files are copied 
in your system. And there's a way to keep track of theses files, so to remove 
them.

What this PEP proposes
----------------------

To address those issues, this PEP proposes a few changes:

- a new `.egg-info` structure using a directory;
- a list of elements this directory holds;
- new functions in `pkgutil` to be able to query the information
  of installed projects.

.egg-info becomes a directory
=============================

The first change would be to make `.egg-info` a directory and let it
hold the `PKG-INFO` file built by the `write_pkg_file` method of 
the `Distribution` class in Distutils.

This change will not impact Python itself, because `egg-info` files are not
used anywhere yet in the standard library besides Distutils. 

Although it will impact the `setuptools` and `pip` projects, but given 
the fact that they already work with a directory that contains a `PKG-INFO` 
file, the change will have no deep consequences.

For example, if the `zlib` package is installed, the elements that
will be installed in `site-packages` will become::

    - zlib
    - zlib-2.5.2.egg-info/
        PKG-INFO

The Python version will also be removed from the `.egg-info` directory
name.

Adding a RECORD in the .egg-info directory
==========================================

A `RECORD` file will be added inside the `.egg-info` directory at installation
time. The `RECORD` file will hold the list of installed files. These correspond 
to the files listed by the `record` option of the `install` command, and will 
always be generated. This will allow uninstallation, as explained later in this 
PEP. This RECORD file is inspired from PEP 262 FILES [#pep262]_.

The RECORD format
-----------------

The `RECORD` file is composed of records, one line per installed file.
Each record is composed of three elements separated by a <tab> character:

- the file's full **path**

 - if the installed file is located in the directory where the .egg-info
   directory of the package is located, it will be a '/'-separated relative 
   path, no matter what is the target system. This makes this information 
   cross-compatible and allows simple installation to be relocatable.

 - if the installed file is located elsewhere in the system, a 
   '/'-separated absolute path is used.

- the **MD5** hash of the file, encoded in hex. Notice that `pyc` and `pyo`
  generated files will not have a hash.

- the file's size in bytes

Example
-------

Back to our `zlib` example, we will have::

    - zlib
    - zlib-2.5.2.egg-info/
        PKG-INFO
        RECORD

And the RECORD file will contain::

    zlib/include/zconf.h    b690274f621402dda63bf11ba5373bf2    9544
    zlib/include/zlib.h 9c4b84aff68aa55f2e9bf70481b94333    66188
    zlib/lib/libz.a e6d43fb94292411909404b07d0692d46    91128
    zlib/share/man/man3/zlib.3  785dc03452f0508ff0678fba2457e0ba    4486
    zlib-2.5.2.egg-info/PKG-INFO    6fe57de576d749536082d8e205b77748    195
    zlib-2.5.2.egg-info/RECORD

Notice that:

- the `RECORD` file can't contain a hash of itself and is just mentioned here
- `zlib` and `zlib-2.5.2.egg-info` are located in `site-packages` so the file 
  paths are relative to it.

New functions in pkgutil
========================

To use the `.egg-info` directory content, we need to add in the standard 
library a set of APIs. The best place to put these APIs seems to be `pkgutil`.

The new functions added in the package are :

- get_projects() -> iterator

  Provides an iterator that will return (name, path) tuples, where `name`
  is the name of a registered project and `path` the path to its `egg-info`
  directory.

- get_egg_info(project_name) -> path or None

  Scans all elements in `sys.path` and looks for all directories ending with
  `.egg-info`. Returns the directory path that contains a PKG-INFO that matches
  `project_name` for the `name` metadata. Notice that there should be at most 
  one result. The first result founded will be returned.

  If the directory is not found, returns None.

  XXX The implementation of `get_egg_info` will focus on minimizing the I/O 
  accesses.

- get_metadata(project_name) -> DistributionMetadata or None

  Uses `get_egg_info` to get the `PKG-INFO` file, and returns a 
  `DistributionMetadata` instance that contains the metadata.

- get_files(project_name, local=False) -> iterator of (path, hash, size, 
                                                       other_projects)

  Uses `get_egg_info` to get the `RECORD` file, and returns an iterator.

  Each returned element is a tuple `(path, hash, size, other_projects)` where
  ``path``, ``hash``, ``size`` are the values found in the RECORD file.

  `path` is the raw value founded in the RECORD file. If `local` is 
  set to True, `path` will be translated to its real absolute path, using
  the local path separator.

  `other_projects` is a tuple containing the name of the projects that are 
  also referring to this file in their own RECORD file (same path).

  If `other_projects` is empty, it means that the file is only referred by the
  current project. In other words, it can be removed if the project is removed.

- get_egg_info_file(project_name, path, binary=False) -> file object or None

  Uses `get_egg_info` and gets any element inside the directory,
  pointed by its relative path. `get_egg_info_file` will perform
  an `os.path.join` on `get_egg_info(project_name)` and `path` to build the 
  whole path. 

  `path` can be a '/'-separated path or can use the local separator. 
  `get_egg_info_file` will automatically convert it using the platform path 
  separator, to look for the file.

  If `binary` is set True, the file will be opened using the binary mode.

Let's use it with our `zlib` example::

    >>> from pkgutil import (get_egg_info, get_metadata, get_egg_info_file, 
    ...                      get_files)
    >>> get_egg_info('zlib')
    '/opt/local/lib/python2.6/site-packages/zlib-2.5.2.egg-info'
    >>> metadata = get_metadata('zlib')
    >>> metadata.version
    '2.5.2'
    >>> get_egg_info_file('zlib', 'PKG-INFO').read()
    some
    ...
    files
    >>> for path, hash, size, other_projects in get_files('zlib'):
    ...     print '%s %s %d %s' % (path, hash, size, ','.join(other_projects))
    ...
    zlib/include/zconf.h b690274f621402dda63bf11ba5373bf2 9544
    zlib/include/zlib.h 9c4b84aff68aa55f2e9bf70481b94333 66188
    zlib/lib/libz.a e6d43fb94292411909404b07d0692d46 91128 
    zlib/share/man/man3/zlib.3 785dc03452f0508ff0678fba2457e0ba 4486 
    zlib-2.5.2.egg-info/PKG-INFO 6fe57de576d749536082d8e205b77748 195 
    zlib-2.5.2.egg-info/RECORD None None 


Adding an Uninstall function
============================

Distutils provides a very basic way to install a project, which is running
the `install` command over the `setup.py` script of the distribution.

Distutils will provide a very basic ``uninstall`` function, that will be added 
in ``distutils.util`` and will take the name of the project to uninstall as 
its argument. ``uninstall`` will use ``pkgutil.get_files`` and remove all 
unique files, as long as their hash didn't change. Then it will remove
directories where it removed the last elements.

``uninstall`` will return a list of uninstalled files::

    >>> from distutils.util import uninstall
    >>> uninstall('zlib')
    ['/opt/local/lib/python2.6/site-packages/zlib/file1',
     '/opt/local/lib/python2.6/site-packages/zlib/file2']

If the project is not found, a ``DistutilsUninstallError`` will be raised.

To make it a reference API for third-party projects that wish to control 
how `uninstall` works, a second callable argument can be used. It will be 
called for each file that is removed. If the callable returns `True`, the 
file will be removed. If it returns False, it will be left alone.

Examples::

    >>> def _remove_and_log(path):
    ...     logging.info('Removing %s' % path)
    ...     return True
    ...
    >>> uninstall('zlib', _remove_and_log)

    >>> def _dry_run(path):
    ...     logging.info('Removing %s (dry run)' % path)
    ...     return False
    ...
    >>> uninstall('zlib', _dry_run)

Of course, a third-party tool can use ``pkgutil.get_files``, to implement 
its own uninstall feature.

Backward compatibility and roadmap
==================================

These changes will not introduce any compatibility problems with the previous
version of Distutils, and will also work with existing third-party tools.

Although, a backport of the new Distutils for 2.5, 2.6, 3.0 and 3.1 will be
provided so people can benefit from these new features.

The plan is to integrate them for Python 2.7 and Python 3.2

References
==========

.. [#pep262]
   http://www.python.org/dev/peps/pep-0262

.. [#pep314]
   http://www.python.org/dev/peps/pep-0314

.. [#setuptools]
   http://peak.telecommunity.com/DevCenter/setuptools

.. [#pip]
   http://pypi.python.org/pypi/pip

Aknowledgments
==============

Jim Fulton, Ian Bicking, Phillip Eby, and many people at Pycon and Distutils-SIG.

Copyright
=========

This document has been placed in the public domain.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:

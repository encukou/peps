PEP: 999
Title: Rationalize Built-in function classes
Author: Mark Shannon <mark@hotpy.org>
Status: Draft
Type: Enhancement
Content-Type: text/x-rst
Created: 10-May-2018
Post-History: 10-May-2018


Abstract
========

Extend the classes for built-in functions and methods to be more like Python functions. Specifically, built-in functions and methods will gain access to the module they are declared in, the ability to introspected, and built-in methods will have access to the class they belong to. This will allow tools like Cython to use the standard built-in function and method classes, thus gaining performance parity with built-in functions like ``len`` or ``print``.
Performance of existing code is not expected to change significantly.

A small number of additional functions will be added to the C API to allow third-party code to create built-in functions in an efficient and portable manner.

Motivation
==========

Currently third-party module authors face a dilemna when implementing
functions in C. Either they can use one of the pre-existing built-in function 
or method classes or implement their own custom class in C.
The first choice causes them to loose the abilities to introspect the resulting callable
and to access module-level data; the second choice is an additional maintenance burden and, more importantly,
has a significant negative impact on performance.

This PEP aims to allow authors of third-party C modules, and tools like to Cython, to
utilise the per-existing built-in function or method classes without a loss of capabilities relative to a function implemented in Python.

Introspection
-------------

Python functions, and built-in functions will gain a ``__signature__`` property to allow consistent introspection.
The semantics of the ``__signature__`` property are fully described below to allow third-party callables to be easily 
introspected if desired.


Enhanced access to the function's enviroment
--------------------------------------------

Built-in functions will gain efficient access to the module in which they are declared,
and if declared in a class, efficient access to that class as well.

Performance
-----------

No significant change is expected.

New classes and changes to existing classes
===========================================

Python visible changes
----------------------

#. Instances of the ``function`` class will gain a ``__signature__`` property.

#. The name of the ``types.BuiltinFunctionType`` class will change from ``builtin_function_or_method`` to ``builtin_function``.

#. Instances of the ``builtin_function`` class will retain the properties of ``builtin_function_or_method`` and gain the ``func_module``, ``func_globals`` and ``__signature__`` properties.
The ``func_module`` allows access to the module to which the function belongs. Note that
this is different from the ``__module__`` property which merely returns the name of the module.
The ``func_globals`` property is equivalent to ``func_module.__dict__`` as is provided to miminc the 
Python function property of the same name.

#. Callables for operators, like ``int.__add__``, become instances of the ``method_descriptor`` class, instead of the ``slot_wrapper`` class.

#. The ``method_descriptor`` class will become a sub-class of the newly renamed ``builtin_function`` class.

#. When binding a ``method_descriptor`` instance to an instance of its owning class, a ``bound_method`` will be created instead of a ``builtin_function_or_method``. This means that the ``method_descriptors`` now mimic the behaviour of Python functions much more closely.
In other words, ``[].append`` becomes a ``bound_method`` instead of a ``builtin_function_or_method``.


Note that ```method_descriptor`` instances will only have access to their module if their ``__objclass__`` class has access to its module. If PEP 573 is approved, then that will always be the case.

C API changes
-------------

A new function ``PyBuiltinFunction_New(PyMethodDef *ml, PyObject *module)`` is added to create
built-in functions.

``PyCFunction_NewEx()`` and ``PyCFunction_New()`` are deprecated and will return a ``PyBuiltinFunction`` if able, otherwise
a ``builtin

In order to enable efficient dispatch of operator callables and some simpler built-in functions, two new ``METH_`` flags are added,``METH_OO`` and ``METH_TRIO`` for the two and three argument forms respectively.


Internal C changes
------------------

The new C struct for built-in functions is::

    typedef struct {
        PyObject_HEAD
        PyMethodDef m_ml; /* Description of the C function to call */
        PyObject    *m_module; /* The __module__ attribute, must be an actual module */
        PyObject    *m_weakreflist; /* List of weak references */
    } PyBuiltinFunctionObject;

and the C struct for ``method_descriptor``s changes to::

    typedef struct {
        PyBuiltinFunctionObject base;
        PyTypeObject *m_objclass; /* The __objclass__ attibute */
    } PyMethodDescrObject;






